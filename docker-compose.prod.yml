# 프로덕션 환경용 Docker Compose
# 모든 서비스 포함 (애플리케이션 + 인프라)
# 사용법: docker-compose -f docker-compose.prod.yml up -d --build

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-prod
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - capstone-prod-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-prod
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 8
    networks:
      - capstone-prod-network
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - mysql_prod_data:/var/lib/mysql
    networks:
      - capstone-prod-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: mongodb-prod
    volumes:
      - mongodb_prod_data:/data/db
    networks:
      - capstone-prod-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes
    networks:
      - capstone-prod-network
    restart: unless-stopped

  app:
    image: ${DOCKER_USERNAME}/capstone-crawler:latest
    container_name: capstone-crawler-prod
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
      redis:
        condition: service_started
    ports:
      - "8080:8080"
    environment:
      # Spring Profile
      SPRING_PROFILES_ACTIVE: prod

      # Database
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USERNAME: root
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

      # MongoDB
      MONGODB_URI: mongodb://mongodb:27017/capstone_crawl_data

      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Application
      SERVER_PORT: 8080
    networks:
      - capstone-prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mysql_prod_data:
  mongodb_prod_data:
  redis_prod_data:

networks:
  capstone-prod-network:
    driver: bridge
